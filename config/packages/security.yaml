security:
  role_hierarchy:
    ROLE_ADMIN:       [ROLE_USER, ROLE_SONATA_ADMIN]
    ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]

  access_decision_manager:
    strategy: unanimous
    allow_if_all_abstain: false

  encoders:
    App\Entity\Users: auto

  providers:
    users:
      entity:
        class: App\Entity\Users
        property: email

  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false

    login:
      pattern: ^/api/login
      stateless: true
      anonymous: true
      json_login:
        check_path: /api/login
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure

    admin:
      host: ^admin\.%base_host_regex%$
      pattern: ^/
      user_checker: App\Security\UserChecker
      provider: users
      form_login:
        provider: users
        login_path: admin_security_login
        check_path: admin_security_check
        failure_path: null
      logout:
        path: admin_security_logout
        target: admin_security_login
      anonymous: true
      guard:
        authenticators:
          - App\Security\Authenticator\AdminLoginAuthenticator

    doc:
      pattern: ^/api/doc
      stateless: true
      anonymous: true

    api:
      pattern: ^/api
      stateless: true
      guard:
        authenticators:
          - lexik_jwt_authentication.jwt_token_authenticator
    main:
      anonymous: lazy
      provider: users

  access_control:
    - { path: ^/api/doc, roles: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/api,       roles: IS_AUTHENTICATED_FULLY }

    - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY, host: ^admin\.%base_host_regex%$ }
    - { path: ^/, roles: ROLE_ADMIN , host: ^admin\.%base_host_regex%$ }

  always_authenticate_before_granting: true

